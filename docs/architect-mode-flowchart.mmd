# Architect Mode Flow Chart

```mermaid
flowchart TB
    %% Entry point
    Start([User Request]) --> Orchestrator[AdaptiveOrchestrator.run]
    
    %% Analysis Phase
    Orchestrator --> Analyzer[RequestAnalyzer.analyze]
    Analyzer --> Intent{ParsedIntent}
    
    %% Decision Branch
    Intent --> ConfCheck{Confidence >= MEDIUM?}
    ConfCheck -->|Yes| Deterministic[generate_simple_tasks]
    ConfCheck -->|No| LLMPlan[ConstrainedPlanner.plan]
    
    %% Task Generation
    Deterministic --> Tasks[Task List]
    LLMPlan --> Validate[Validate JSON]
    Validate -->|Valid| Tasks
    Validate -->|Invalid| Retry{Retry < 3?}
    Retry -->|Yes| LLMPlan
    Retry -->|No| Fallback[Return Empty]
    
    %% Execution Phase
    Tasks --> Split{Split Tasks}
    Split --> ReadTasks[Read Tasks]
    Split --> WriteTasks[Write Tasks]
    
    ReadTasks --> Parallel[Parallel Execution]
    WriteTasks --> Sequential[Sequential Execution]
    
    Parallel --> Results[Execution Results]
    Sequential --> Results
    
    %% Feedback Loop
    Results --> Feedback[FeedbackLoop.analyze_results]
    Feedback --> Decision{Decision Type}
    
    Decision -->|COMPLETE| Success[Return Results]
    Decision -->|CONTINUE| NewTasks[Generate New Tasks]
    Decision -->|RETRY| NewTasks
    Decision -->|ERROR| Error[Handle Error]
    
    NewTasks --> IterCheck{Iteration < 5?}
    IterCheck -->|Yes| Tasks
    IterCheck -->|No| Success
    
    Error --> Success
    Fallback --> RegularMode[Fall back to regular mode]
    
    %% Styling
    style Start fill:#e1f5e1,stroke:#4caf50,stroke-width:3px
    style Success fill:#e1f5e1,stroke:#4caf50,stroke-width:3px
    style Error fill:#ffe1e1,stroke:#f44336,stroke-width:3px
    style RegularMode fill:#fff3e0,stroke:#ff9800,stroke-width:3px
    
    %% Component Styling
    style Orchestrator fill:#e3f2fd,stroke:#2196f3,stroke-width:2px
    style Analyzer fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px
    style LLMPlan fill:#fce4ec,stroke:#e91e63,stroke-width:2px
    style Feedback fill:#e8f5e9,stroke:#4caf50,stroke-width:2px
```

## Component Details

### RequestAnalyzer Patterns
```mermaid
graph LR
    Request[User Request] --> Patterns{Pattern Matching}
    
    Patterns --> Read[READ_FILE<br/>read, show, display]
    Patterns --> Write[WRITE_FILE<br/>create, write, make]
    Patterns --> Update[UPDATE_FILE<br/>update, modify, fix]
    Patterns --> Search[SEARCH_CODE<br/>search, find, grep]
    Patterns --> Complex[COMPLEX<br/>multi-step keywords]
    
    Read --> High[HIGH Confidence]
    Write --> High
    Update --> High
    Search --> High
    Complex --> Low[LOW Confidence]
```

### Task Execution Strategy
```mermaid
graph TD
    Tasks[Task Queue] --> Type{Task Type?}
    
    Type -->|Read/Non-mutating| ParallelPool[ThreadPoolExecutor<br/>Max 4 workers]
    Type -->|Write/Mutating| SeqQueue[Sequential Queue]
    
    ParallelPool --> Timeout1[30s Task Timeout]
    SeqQueue --> Timeout2[30s Task Timeout]
    
    Timeout1 --> Collect[Collect Results]
    Timeout2 --> Collect
    
    Collect --> Total{Total Time < 2min?}
    Total -->|Yes| Continue[Continue]
    Total -->|No| Abort[Abort Remaining]
```

### Feedback Decision Tree
```mermaid
graph TD
    Results[Task Results] --> Quick{Quick Checks}
    
    Quick --> AllSuccess{All Succeeded?}
    AllSuccess -->|Yes + Read Only| Complete[COMPLETE]
    AllSuccess -->|No| Errors{Error Type?}
    
    Errors --> FileNotFound[File Not Found]
    Errors --> Permission[Permission Denied]
    Errors --> Other[Other Error]
    
    FileNotFound --> ErrorDec[ERROR Decision]
    Permission --> ErrorDec
    Other --> LLM[LLM Analysis]
    
    LLM --> Context[Build Context]
    Context --> Analyze[Analyze with LLM]
    Analyze --> Parse[Parse JSON Response]
    
    Parse --> FinalDec{Final Decision}
    FinalDec --> Complete2[COMPLETE]
    FinalDec --> Continue[CONTINUE + New Tasks]
    FinalDec --> Retry[RETRY + Modified Tasks]
    FinalDec --> Error[ERROR]
```