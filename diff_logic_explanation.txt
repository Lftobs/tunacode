Diff Generation and Formatting in TunaCode

The TunaCode agent generates diffs between two text inputs (original and modified) using the Python standard library difflib and formats them for terminal display using the rich library. Below is an explanation of the diff logic implemented in the utility function `render_file_diff`.

Function: render_file_diff(target: str, patch: str, colors=None) -> Text

- Purpose: Creates a formatted visual diff between `target` (original text) and `patch` (new text).
- Inputs:
  - target: The original text string.
  - patch: The new text string.
  - colors: Optional dictionary for text styling (e.g., error color for deletions, success color for additions).

Steps:
1. Split both `target` and `patch` texts into lines.
2. Use `difflib.SequenceMatcher` to compare the lines and generate a sequence of operations (opcodes) to transform `target` into `patch`.
3. Iterate over each opcode which includes an operation and corresponding line ranges.
4. For each opcode:
   - `equal`: Lines are unchanged; prefix with two spaces.
   - `delete`: Lines removed from `target`; prefix with '- ', style as error if colors provided.
   - `insert`: Lines added in `patch`; prefix with '+ ', style as success if colors provided.
   - `replace`: Lines replaced; first show removed lines with '- ', styled as error; then added lines with '+ ', styled as success.
5. Append each processed line into a `rich.text.Text` object for colored terminal output.

Outcome:
- The function returns a `Text` object representing a human-readable, colorized diff highlighting additions, deletions, and unchanged lines between two versions of content.

This logic allows TunaCode to visually communicate the exact changes it plans to make in files, enhancing code review and safety before applying modifications.

--- End of Document ---
